!function(){"use strict";class e{constructor(e,t,s,n){let{item:i,handleCardClick:r}=e;this._templateSelector=t,this._name=i.name,this._link=i.link,this._likes=i.likes,this._ownerId=i.owner._id,this._id=i._id,this._handleCardClick=r,this._handleDeleteClick=s,this._handleLikeClick=n,this._item=i}_countLike(){this._likes.length<1?this._likeCounter.textContent="":this._likeCounter.textContent=this._likes.length}_checkInitialLike(e){this._likes.some((t=>t._id==e._id))&&this._likeButton.classList.add("gallery__like-button_active")}_compareID(e){this._deleteButton=this._element.querySelector(".gallery__delete-button"),this._ownerId!==e._id&&(this._deleteButton.style.display="none")}_getTemplate(){return this._element=this._templateSelector.querySelector(".gallery__card").cloneNode(!0),this._element}_handleLikeButton(){this._handleLikeClick(this)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeButton()})),this._element.querySelector(".gallery__delete-button").addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardPicture.addEventListener("click",(()=>this._handleCardClick({name:this._name,link:this._link})))}generateCard(e){return this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".gallery__like-button"),this._cardPicture=this._element.querySelector(".gallery__picture"),this._likeCounter=this._element.querySelector(".gallery__like-counter"),this._setEventListeners(),this._compareID(e),this._checkInitialLike(e),this._countLike(),this._element.querySelector(".gallery__text").textContent=this._name,this._cardPicture.src=this._link,this._cardPicture.alt=this._name,this._element}}class t{constructor(e,t){this._settings=e,this._formElement=t}_showInputError(e){this._errorElement=this._formElement.querySelector(".".concat(e.id,"-error")),e.classList.add(this._settings.inputErrorClass),this._errorElement.textContent=e.validationMessage,this._errorElement.classList.add(this._settings.errorClass)}_hideInputError(e){this._errorElement=this._formElement.querySelector(".".concat(e.id,"-error")),e.classList.remove(this._settings.inputErrorClass),this._errorElement.classList.remove(this._settings.errorClass),this._errorElement.textContent=""}_hasInvalidInput(e){return Array.from(e).some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput(this._inputList)?(this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1)}_handleInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_setEventListeners(){this._inputList=this._formElement.querySelectorAll(this._settings.inputSelector),this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._handleInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor(e){this._popup=document.querySelector(e),this._handleEscapeClose=this._handleEscClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){this._popup.classList.add("popup_visible"),document.addEventListener("keydown",this._handleEscapeClose)}close(){this._popup.classList.remove("popup_visible"),document.removeEventListener("keydown",this._handleEscapeClose)}setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup_visible")||e.target.classList.contains("popup__close-button-icon"))&&this.close()}))}}class n extends s{constructor(e,t){super(e),this._handleSubmit=t,this._form=this._popup.querySelector(".popup__form"),this._button=this._form.querySelector(".popup__button")}_getInputValues(){return this._data={},this._inputList=this._popup.querySelectorAll(".popup__input"),this._inputList.forEach((e=>{this._data[e.name]=e.value})),this._data}openWithData(e){super.open(),this._data=e}close(){super.close(),this._button.textContent="Save",this._form.reset()}setEventListeners(){super.setEventListeners(),this._popup.addEventListener("submit",(e=>{this._button.textContent="Saving...",e.preventDefault(),this._handleSubmit(this._data)}))}}const i={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_active"},r=document.querySelector("#card-template").content,o=document.querySelector(".popup__form-profile"),a=document.querySelector(".user__edit-button"),l=document.querySelector(".user__add-button"),_=document.querySelector(".popup__input_value_name"),c=document.querySelector(".popup__input_value_about"),h=document.querySelector(".popup__form-addCard"),u=document.querySelector(".user__avatar-wrapper"),d=document.querySelector(".popup__form-avatar");let p={};const m=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}sendCardData(e){return this._name=e.name,this._link=e.link,fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:this._name,link:this._link})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}setUserInfo(e){let{name:t,about:s,avatar:n}=e;return this._name=t,this._about=s,this._avatar=n,fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:this._name,about:this._about,avatar:this._avatar})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}getUserInfo(){return fetch("".concat(this._baseUrl,"/users/me"),{method:"GET",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}getInitialCards(){return fetch("".concat(this._baseUrl,"/cards"),{method:"GET",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}deleteCard(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e._id),{method:"DELETE",headers:this._headers})}likeAdd(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e._id),{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}likeDelete(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}editProfilePhoto(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"302ca387-b31a-4cb2-8cb9-197e187dc382","Content-Type":"application/json"}}),v=new n(".popup_type_profile",(function(){m.setUserInfo(v._getInputValues()).then((e=>{f.setUserInfo(v._getInputValues()),v.close()})).catch((e=>{console.log(e)}))}));v.setEventListeners();const k=new n(".popup_type_addCard",(function(){const e=k._getInputValues(),t={name:e.title,link:e.url};m.sendCardData(t).then((e=>{g.addItem(I({item:e})),k.close(),h.reset()}))}));k.setEventListeners();const E=new class extends s{open(e){let{name:t,link:s}=e;this._elementPic=this._popup.querySelector(".popup__image"),this._elementText=this._popup.querySelector(".popup__image-text"),this._elementPic.src=s,this._elementPic.alt="".concat(t," photo"),this._elementText.textContent=t,super.open()}}(".popup_type_image");E.setEventListeners();const b=new n(".popup_type_delete",(function(e){m.deleteCard(e).then((t=>{e._element.remove(),b.close()})).catch((e=>{console.log(e)}))}));b.setEventListeners();const y=new n(".popup_type_avatar",(function(){const e=y._getInputValues();m.editProfilePhoto(e.avatar).then((t=>{f.setUserAvatar(e.avatar),y.close()})).catch((e=>{console.log(e)}))}));y.setEventListeners();const g=new class{constructor(e,t){let{items:s,renderer:n}=e;this._renderedItems=s,this._renderer=n,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}renderItems(){this._renderedItems.forEach((e=>{this._renderer(e)}))}}({items:[],renderer:e=>{g.addItem(I({item:e}))}},".gallery");m.getInitialCards().then((e=>{Array.from(e).forEach((e=>{g.addItem(I({item:e}))}))})).catch((e=>{console.log(e)}));const f=new class{constructor(e,t){let{userName:s,userInfo:n}=e;this._name=document.querySelector(s),this._about=document.querySelector(n),this._avatar=document.querySelector(t)}getUserInfo(){return this._userData={name:this._name.textContent,about:this._about.textContent},this._userData}setUserAvatar(e){this._avatar.src=e}setUserInfo(e){this._name.textContent=e.name,this._about.textContent=e.about}}({userName:".user__name",userInfo:".user__info"},".user__avatar");m.getUserInfo().then((e=>(f.setUserInfo(e),f.setUserAvatar(e.avatar),p=e,p))).catch((e=>{console.log(e)}));const C=new t(i,h);C.enableValidation();const L=new t(i,o);L.enableValidation();const S=new t(i,d);function I(t){let{item:s}=t;return new e({item:s,handleCardClick:e=>{let{name:t,link:s}=e;E.open({name:t,link:s})}},r,U,q).generateCard(p)}function q(e){m.likeDelete(e._id).then((t=>{e._likeCounter.textContent=t.likes.length,e._likeButton.classList.remove("gallery__like-button_active")})).catch(m.likeAdd(e).then((t=>{e._likeCounter.textContent=t.likes.length,e._likeButton.classList.add("gallery__like-button_active")})))}function U(e){b.openWithData(e)}S.enableValidation(),a.addEventListener("click",(()=>{L.resetValidation(),v.open();const e=f.getUserInfo();_.value=e.name,c.value=e.about})),l.addEventListener("click",(()=>{C.resetValidation(),k.open()})),u.addEventListener("click",(()=>{S.resetValidation(),y.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoieUJBQWUsTUFBTUEsRUFDakJDLFlBQVksRUFBMkJDLEVBQWtCQyxFQUFtQkMsR0FBaUIsSUFBakYsS0FBRUMsRUFBRixnQkFBUUMsR0FBeUUsRUFDekZDLEtBQUtDLGtCQUFvQk4sRUFDekJLLEtBQUtFLE1BQVFKLEVBQUtLLEtBQ2xCSCxLQUFLSSxNQUFRTixFQUFLTyxLQUNsQkwsS0FBS00sT0FBU1IsRUFBS1MsTUFDbkJQLEtBQUtRLFNBQVdWLEVBQUtXLE1BQU1DLElBQzNCVixLQUFLVSxJQUFNWixFQUFLWSxJQUNoQlYsS0FBS1csaUJBQW1CWixFQUN4QkMsS0FBS1ksbUJBQXFCaEIsRUFDMUJJLEtBQUthLGlCQUFtQmhCLEVBQ3hCRyxLQUFLYyxNQUFRaEIsRUFFakJpQixhQUNRZixLQUFLTSxPQUFPVSxPQUFTLEVBQ3JCaEIsS0FBS2lCLGFBQWFDLFlBQWMsR0FFaENsQixLQUFLaUIsYUFBYUMsWUFBY2xCLEtBQUtNLE9BQU9VLE9BR3BERyxrQkFBa0JDLEdBQ1ZwQixLQUFLTSxPQUFPZSxNQUFLdkIsR0FBUUEsRUFBS1ksS0FBT1UsRUFBS1YsT0FDMUNWLEtBQUtzQixZQUFZQyxVQUFVQyxJQUFJLCtCQUd2Q0MsV0FBV0wsR0FDUHBCLEtBQUswQixjQUFnQjFCLEtBQUsyQixTQUFTQyxjQUFjLDJCQUM3QzVCLEtBQUtRLFdBQWFZLEVBQUtWLE1BQ3ZCVixLQUFLMEIsY0FBY0csTUFBTUMsUUFBVSxRQUczQ0MsZUFJSSxPQUhBL0IsS0FBSzJCLFNBQVczQixLQUFLQyxrQkFDaEIyQixjQUFjLGtCQUNkSSxXQUFVLEdBQ1JoQyxLQUFLMkIsU0FFaEJNLG9CQUNJakMsS0FBS2EsaUJBQWlCYixNQUUxQmtDLHFCQUNJbEMsS0FBS3NCLFlBQVlhLGlCQUFpQixTQUFTLEtBQ3ZDbkMsS0FBS2lDLHVCQUVUakMsS0FBSzJCLFNBQVNDLGNBQWMsMkJBQTJCTyxpQkFBaUIsU0FBUyxLQUM3RW5DLEtBQUtZLG1CQUFtQlosU0FFNUJBLEtBQUtvQyxhQUFhRCxpQkFBaUIsU0FBUyxJQUFNbkMsS0FBS1csaUJBQWlCLENBQ3BFUixLQUFNSCxLQUFLRSxNQUNYRyxLQUFNTCxLQUFLSSxVQUduQmlDLGFBQWFqQixHQVlULE9BWEFwQixLQUFLMkIsU0FBVzNCLEtBQUsrQixlQUNyQi9CLEtBQUtzQixZQUFjdEIsS0FBSzJCLFNBQVNDLGNBQWMseUJBQy9DNUIsS0FBS29DLGFBQWVwQyxLQUFLMkIsU0FBU0MsY0FBYyxxQkFDaEQ1QixLQUFLaUIsYUFBZWpCLEtBQUsyQixTQUFTQyxjQUFjLDBCQUNoRDVCLEtBQUtrQyxxQkFDTGxDLEtBQUt5QixXQUFXTCxHQUNoQnBCLEtBQUttQixrQkFBa0JDLEdBQ3ZCcEIsS0FBS2UsYUFDTGYsS0FBSzJCLFNBQVNDLGNBQWMsa0JBQWtCVixZQUFjbEIsS0FBS0UsTUFDakVGLEtBQUtvQyxhQUFhRSxJQUFNdEMsS0FBS0ksTUFDN0JKLEtBQUtvQyxhQUFhRyxJQUFNdkMsS0FBS0UsTUFDdEJGLEtBQUsyQixVQ2hFTCxNQUFNYSxFQUNqQjlDLFlBQVkrQyxFQUFVQyxHQUNsQjFDLEtBQUsyQyxVQUFZRixFQUNqQnpDLEtBQUs0QyxhQUFlRixFQUd4QkcsZ0JBQWdCQyxHQUNaOUMsS0FBSytDLGNBQWdCL0MsS0FBSzRDLGFBQWFoQixjQUFsQixXQUFvQ2tCLEVBQWFFLEdBQWpELFdBQ3JCRixFQUFhdkIsVUFBVUMsSUFBSXhCLEtBQUsyQyxVQUFVTSxpQkFDMUNqRCxLQUFLK0MsY0FBYzdCLFlBQWM0QixFQUFhSSxrQkFDOUNsRCxLQUFLK0MsY0FBY3hCLFVBQVVDLElBQUl4QixLQUFLMkMsVUFBVVEsWUFFcERDLGdCQUFnQk4sR0FDWjlDLEtBQUsrQyxjQUFnQi9DLEtBQUs0QyxhQUFhaEIsY0FBbEIsV0FBb0NrQixFQUFhRSxHQUFqRCxXQUNyQkYsRUFBYXZCLFVBQVU4QixPQUFPckQsS0FBSzJDLFVBQVVNLGlCQUM3Q2pELEtBQUsrQyxjQUFjeEIsVUFBVThCLE9BQU9yRCxLQUFLMkMsVUFBVVEsWUFDbkRuRCxLQUFLK0MsY0FBYzdCLFlBQWMsR0FHckNvQyxpQkFBaUJDLEdBRWIsT0FEZUMsTUFBTUMsS0FBS0YsR0FDWmxDLE1BQU15QixJQUNSQSxFQUFhWSxTQUFTQyxRQUd0Q0MscUJBQ1E1RCxLQUFLc0QsaUJBQWlCdEQsS0FBSzZELGFBQzNCN0QsS0FBSzhELGNBQWN2QyxVQUFVQyxJQUFJeEIsS0FBSzJDLFVBQVVvQixxQkFDaEQvRCxLQUFLOEQsY0FBY0UsVUFBVyxJQUU5QmhFLEtBQUs4RCxjQUFjdkMsVUFBVThCLE9BQU9yRCxLQUFLMkMsVUFBVW9CLHFCQUNuRC9ELEtBQUs4RCxjQUFjRSxVQUFXLEdBR3RDQyxxQkFBcUJuQixHQUNiQSxFQUFhWSxTQUFTQyxNQUN0QjNELEtBQUtvRCxnQkFBZ0JOLEdBRXJCOUMsS0FBSzZDLGdCQUFnQkMsR0FHN0JaLHFCQUNJbEMsS0FBSzZELFdBQWE3RCxLQUFLNEMsYUFBYXNCLGlCQUFpQmxFLEtBQUsyQyxVQUFVd0IsZUFDcEVuRSxLQUFLOEQsY0FBZ0I5RCxLQUFLNEMsYUFBYWhCLGNBQWM1QixLQUFLMkMsVUFBVXlCLHNCQUNwRXBFLEtBQUs0RCxxQkFDTDVELEtBQUs2RCxXQUFXUSxTQUFTdkIsSUFDckJBLEVBQWFYLGlCQUFpQixTQUFTLEtBQ25DbkMsS0FBS2lFLHFCQUFxQm5CLEdBQzFCOUMsS0FBSzRELDJCQUlqQlUsa0JBQ0l0RSxLQUFLNEQscUJBQ0w1RCxLQUFLNkQsV0FBV1EsU0FBU3ZCLElBQ3JCOUMsS0FBS29ELGdCQUFnQk4sTUFHN0J5QixtQkFDSXZFLEtBQUs0QyxhQUFhVCxpQkFBaUIsVUFBV3FDLElBQzFDQSxFQUFJQyxvQkFFUnpFLEtBQUtrQyxzQkM5REUsTUFBTXdDLEVBQ2pCaEYsWUFBWWlGLEdBQ1IzRSxLQUFLNEUsT0FBU0MsU0FBU2pELGNBQWMrQyxHQUNyQzNFLEtBQUs4RSxtQkFBcUI5RSxLQUFLK0UsZ0JBQWdCQyxLQUFLaEYsTUFFeEQrRSxnQkFBZ0JQLEdBQ0ksV0FBWkEsRUFBSVMsS0FDSmpGLEtBQUtrRixRQUdiQyxPQUNJbkYsS0FBSzRFLE9BQU9yRCxVQUFVQyxJQUFJLGlCQUMxQnFELFNBQVMxQyxpQkFBaUIsVUFBV25DLEtBQUs4RSxvQkFFOUNJLFFBQ0lsRixLQUFLNEUsT0FBT3JELFVBQVU4QixPQUFPLGlCQUM3QndCLFNBQVNPLG9CQUFvQixVQUFXcEYsS0FBSzhFLG9CQUVqRE8sb0JBQ0lyRixLQUFLNEUsT0FBT3pDLGlCQUFpQixhQUFjcUMsS0FDbkNBLEVBQUljLE9BQU8vRCxVQUFVZ0UsU0FBUyxrQkFBb0JmLEVBQUljLE9BQU8vRCxVQUFVZ0UsU0FBUyw4QkFDaEZ2RixLQUFLa0YsWUNuQk4sTUFBTU0sVUFBc0JkLEVBQ3ZDaEYsWUFBWWlGLEVBQWVjLEdBQ3ZCQyxNQUFNZixHQUNOM0UsS0FBSzJGLGNBQWdCRixFQUNyQnpGLEtBQUs0RixNQUFRNUYsS0FBSzRFLE9BQU9oRCxjQUFjLGdCQUN2QzVCLEtBQUs2RixRQUFVN0YsS0FBSzRGLE1BQU1oRSxjQUFjLGtCQUU1Q2tFLGtCQU1JLE9BTEE5RixLQUFLK0YsTUFBUSxHQUNiL0YsS0FBSzZELFdBQWE3RCxLQUFLNEUsT0FBT1YsaUJBQWlCLGlCQUMvQ2xFLEtBQUs2RCxXQUFXUSxTQUFTMkIsSUFDckJoRyxLQUFLK0YsTUFBTUMsRUFBTTdGLE1BQVE2RixFQUFNQyxTQUU1QmpHLEtBQUsrRixNQUVoQkcsYUFBYTlFLEdBQ1RzRSxNQUFNUCxPQUNObkYsS0FBSytGLE1BQVEzRSxFQUVqQjhELFFBQ0lRLE1BQU1SLFFBQ05sRixLQUFLNkYsUUFBUTNFLFlBQWMsT0FDM0JsQixLQUFLNEYsTUFBTU8sUUFFZmQsb0JBQ0lLLE1BQU1MLG9CQUNOckYsS0FBSzRFLE9BQU96QyxpQkFBaUIsVUFBV3FDLElBQ3BDeEUsS0FBSzZGLFFBQVEzRSxZQUFjLFlBQzNCc0QsRUFBSUMsaUJBQ0p6RSxLQUFLMkYsY0FBYzNGLEtBQUsrRixXQzdCN0IsTUFBTUssRUFBZSxDQUN4QkMsYUFBYyxlQUNkbEMsY0FBZSxnQkFDZkMscUJBQXNCLGlCQUN0Qkwsb0JBQXFCLHlCQUNyQmQsZ0JBQWlCLDBCQUNqQkUsV0FBWSx1QkNRVm1ELEVBQWV6QixTQUFTakQsY0FBYyxrQkFBa0IyRSxRQUN4REMsRUFBVzNCLFNBQVNqRCxjQUFjLHdCQUNsQzZFLEVBQWE1QixTQUFTakQsY0FBYyxzQkFDcEM4RSxFQUFnQjdCLFNBQVNqRCxjQUFjLHFCQUN2QytFLEVBQVk5QixTQUFTakQsY0FBYyw0QkFDbkNnRixFQUFZL0IsU0FBU2pELGNBQWMsNkJBQ25DaUYsRUFBY2hDLFNBQVNqRCxjQUFjLHdCQUNyQ2tGLEVBQWFqQyxTQUFTakQsY0FBYyx5QkFDcENtRixFQUFhbEMsU0FBU2pELGNBQWMsdUJBQzFDLElBQUlvRixFQUFrQixHQUd0QixNQUFNQyxFQUFNLElDNUJHLE1BQ1h2SCxZQUFZd0gsR0FDUmxILEtBQUttSCxTQUFXRCxFQUFRRSxRQUN4QnBILEtBQUtxSCxTQUFXSCxFQUFRSSxRQUU1QkMsYUFBYXpILEdBR1QsT0FGQUUsS0FBS0UsTUFBUUosRUFBS0ssS0FDbEJILEtBQUtJLE1BQVFOLEVBQUtPLEtBQ1htSCxNQUFNLEdBQUQsT0FBSXhILEtBQUttSCxTQUFULFVBQTJCLENBQy9CTSxPQUFRLE9BQ1JILFFBQVN0SCxLQUFLcUgsU0FDZEssS0FBTUMsS0FBS0MsVUFBVSxDQUNqQnpILEtBQU1ILEtBQUtFLE1BQ1hHLEtBQU1MLEtBQUtJLFVBR2xCeUgsTUFBS0MsR0FDRUEsRUFBSUMsR0FDR0QsRUFBSUUsT0FFUkMsUUFBUUMsT0FBUixpQkFBeUJKLEVBQUlLLFdBR2hEQyxZQUFZLEdBQXlCLElBQXpCLEtBQUVqSSxFQUFGLE1BQVFrSSxFQUFSLE9BQWVDLEdBQVUsRUFJakMsT0FIQXRJLEtBQUtFLE1BQVFDLEVBQ2JILEtBQUt1SSxPQUFTRixFQUNkckksS0FBS3dJLFFBQVVGLEVBQ1JkLE1BQU0sR0FBRCxPQUFJeEgsS0FBS21ILFNBQVQsYUFBOEIsQ0FDbENNLE9BQVEsUUFDUkgsUUFBU3RILEtBQUtxSCxTQUNkSyxLQUFNQyxLQUFLQyxVQUFVLENBQ2pCekgsS0FBTUgsS0FBS0UsTUFDWG1JLE1BQU9ySSxLQUFLdUksT0FDWkQsT0FBUXRJLEtBQUt3SSxZQUdwQlgsTUFBS0MsR0FDRUEsRUFBSUMsR0FDR0QsRUFBSUUsT0FFUkMsUUFBUUMsT0FBUixpQkFBeUJKLEVBQUlLLFdBR2hETSxjQUNJLE9BQU9qQixNQUFNLEdBQUQsT0FBSXhILEtBQUttSCxTQUFULGFBQThCLENBQ2xDTSxPQUFRLE1BQ1JILFFBQVN0SCxLQUFLcUgsV0FFakJRLE1BQUtDLEdBQ0VBLEVBQUlDLEdBQ0dELEVBQUlFLE9BRVJDLFFBQVFDLE9BQVIsaUJBQXlCSixFQUFJSyxXQUdoRE8sa0JBQ0ksT0FBT2xCLE1BQU0sR0FBRCxPQUFJeEgsS0FBS21ILFNBQVQsVUFBMkIsQ0FDL0JNLE9BQVEsTUFDUkgsUUFBU3RILEtBQUtxSCxXQUVqQlEsTUFBS0MsR0FDRUEsRUFBSUMsR0FDR0QsRUFBSUUsT0FFUkMsUUFBUUMsT0FBUixpQkFBeUJKLEVBQUlLLFdBR2hEUSxXQUFXdkgsR0FDUCxPQUFPb0csTUFBTSxHQUFELE9BQUl4SCxLQUFLbUgsU0FBVCxrQkFBMkIvRixFQUFLVixLQUFPLENBQy9DK0csT0FBUSxTQUNSSCxRQUFTdEgsS0FBS3FILFdBR3RCdUIsUUFBUXhILEdBQ0osT0FBT29HLE1BQU0sR0FBRCxPQUFJeEgsS0FBS21ILFNBQVQsd0JBQWlDL0YsRUFBS1YsS0FBTyxDQUNyRCtHLE9BQVEsTUFDUkgsUUFBU3RILEtBQUtxSCxXQUNmUSxNQUFLQyxHQUNBQSxFQUFJQyxHQUNHRCxFQUFJRSxPQUVSQyxRQUFRQyxPQUFSLGlCQUF5QkosRUFBSUssV0FHNUNVLFdBQVd6SCxHQUNQLE9BQU9vRyxNQUFNLEdBQUQsT0FBSXhILEtBQUttSCxTQUFULHdCQUFpQy9GLEdBQVEsQ0FDakRxRyxPQUFRLFNBQ1JILFFBQVN0SCxLQUFLcUgsV0FDZlEsTUFBS0MsR0FDQUEsRUFBSUMsR0FDR0QsRUFBSUUsT0FFUkMsUUFBUUMsT0FBUixpQkFBeUJKLEVBQUlLLFdBRzVDVyxpQkFBaUIxSCxHQUNiLE9BQU9vRyxNQUFNLEdBQUQsT0FBSXhILEtBQUttSCxTQUFULG9CQUFxQyxDQUM3Q00sT0FBUSxRQUNSSCxRQUFTdEgsS0FBS3FILFNBQ2RLLEtBQU1DLEtBQUtDLFVBQVUsQ0FDakJVLE9BQVFsSCxNQUVieUcsTUFBS0MsR0FDQUEsRUFBSUMsR0FDR0QsRUFBSUUsT0FFUkMsUUFBUUMsT0FBUixpQkFBeUJKLEVBQUlLLGFEOUU1QixDQUNoQmYsUUFBUyw4Q0FDVEUsUUFBUyxDQUNMeUIsY0FBZSx1Q0FDZixlQUFnQixzQkFLbEJDLEVBQW1CLElBQUl4RCxFQUFjLHVCQTZHM0MsV0FDSXlCLEVBQUltQixZQUFZWSxFQUFpQmxELG1CQUM1QitCLE1BQU1DLElBQ0htQixFQUFpQmIsWUFBWVksRUFBaUJsRCxtQkFDOUNrRCxFQUFpQjlELFdBRXBCZ0UsT0FBT0MsSUFDSkMsUUFBUUMsSUFBSUYsU0FuSHhCSCxFQUFpQjNELG9CQUVqQixNQUFNaUUsRUFBbUIsSUFBSTlELEVBQWMsdUJBcUgzQyxXQUNJLE1BQU0rRCxFQUFZRCxFQUFpQnhELGtCQUM3QjFFLEVBQU8sQ0FBRWpCLEtBQU1vSixFQUFVQyxNQUFPbkosS0FBTWtKLEVBQVVFLEtBQ3REeEMsRUFBSU0sYUFBYW5HLEdBQU15RyxNQUFNL0gsSUFDekI0SixFQUFZQyxRQUFRQyxFQUFXLENBQUU5SixLQUFBQSxLQUNqQ3dKLEVBQWlCcEUsUUFDakIyQixFQUFZVixjQTFIcEJtRCxFQUFpQmpFLG9CQUVqQixNQUFNd0UsRUFBYSxJRXpDSixjQUE2Qm5GLEVBQ3hDUyxLQUFLLEdBQWdCLElBQWhCLEtBQUVoRixFQUFGLEtBQVFFLEdBQVEsRUFDakJMLEtBQUs4SixZQUFjOUosS0FBSzRFLE9BQU9oRCxjQUFjLGlCQUM3QzVCLEtBQUsrSixhQUFlL0osS0FBSzRFLE9BQU9oRCxjQUFjLHNCQUM5QzVCLEtBQUs4SixZQUFZeEgsSUFBTWpDLEVBQ3ZCTCxLQUFLOEosWUFBWXZILElBQWpCLFVBQTBCcEMsRUFBMUIsVUFDQUgsS0FBSytKLGFBQWE3SSxZQUFjZixFQUNoQ3VGLE1BQU1QLFNGa0N3QixxQkFDdEMwRSxFQUFXeEUsb0JBRVgsTUFBTTJFLEVBQWMsSUFBSXhFLEVBQWMsc0JBMEZ0QyxTQUFvQ3BFLEdBQ2hDNkYsRUFBSTBCLFdBQVd2SCxHQUFNeUcsTUFBTUMsSUFDbkIxRyxFQUFLTyxTQUFTMEIsU0FDZDJHLEVBQVk5RSxXQUVmZ0UsT0FBT0MsSUFDSkMsUUFBUUMsSUFBSUYsU0EvRnhCYSxFQUFZM0Usb0JBRVosTUFBTTRFLEVBQWlCLElBQUl6RSxFQUFjLHNCQTJEekMsV0FDSSxNQUFNcEUsRUFBTzZJLEVBQWVuRSxrQkFDNUJtQixFQUFJNkIsaUJBQWlCMUgsRUFBS2tILFFBQVFULE1BQU1DLElBQ2hDbUIsRUFBaUJpQixjQUFjOUksRUFBS2tILFFBQ3BDMkIsRUFBZS9FLFdBRWxCZ0UsT0FBT0MsSUFDSkMsUUFBUUMsSUFBSUYsU0FqRXhCYyxFQUFlNUUsb0JBRWYsTUFBTXFFLEVBQWMsSUdwREwsTUFDWGhLLFlBQVksRUFBcUJ5SyxHQUFtQixJQUF4QyxNQUFFQyxFQUFGLFNBQVNDLEdBQStCLEVBQ2hEckssS0FBS3NLLGVBQWlCRixFQUN0QnBLLEtBQUt1SyxVQUFZRixFQUNqQnJLLEtBQUt3SyxXQUFhM0YsU0FBU2pELGNBQWN1SSxHQUc3Q1IsUUFBUWMsR0FDSnpLLEtBQUt3SyxXQUFXRSxRQUFRRCxHQUc1QkUsY0FDSTNLLEtBQUtzSyxlQUFlakcsU0FBUXZFLElBQ3hCRSxLQUFLdUssVUFBVXpLLFFIdUNLLENBQzVCc0ssTUFBTyxHQUNQQyxTQUFXdkssSUFDUDRKLEVBQVlDLFFBQVFDLEVBQVcsQ0FBRTlKLEtBQUFBLE9BRXRDLFlBRUhtSCxFQUFJeUIsa0JBQ0NiLE1BQU0rQyxJQUNXcEgsTUFBTUMsS0FBS21ILEdBQ25CdkcsU0FBUXZFLElBQ1Y0SixFQUFZQyxRQUFRQyxFQUFXLENBQUU5SixLQUFBQSxXQUd4Q29KLE9BQU9DLElBQ0pDLFFBQVFDLElBQUlGLE1BR3BCLE1BQU1GLEVBQW1CLElJdEVWLE1BQ1h2SixZQUFZLEVBQXdCNEksR0FBUSxJQUFoQyxTQUFFdUMsRUFBRixTQUFZQyxHQUFvQixFQUN4QzlLLEtBQUtFLE1BQVEyRSxTQUFTakQsY0FBY2lKLEdBQ3BDN0ssS0FBS3VJLE9BQVMxRCxTQUFTakQsY0FBY2tKLEdBQ3JDOUssS0FBS3dJLFFBQVUzRCxTQUFTakQsY0FBYzBHLEdBRTFDRyxjQUVJLE9BREF6SSxLQUFLK0ssVUFBWSxDQUFFNUssS0FBTUgsS0FBS0UsTUFBTWdCLFlBQWFtSCxNQUFPckksS0FBS3VJLE9BQU9ySCxhQUM3RGxCLEtBQUsrSyxVQUVoQmIsY0FBYzlJLEdBQ1ZwQixLQUFLd0ksUUFBUWxHLElBQU1sQixFQUV2QmdILFlBQVloSCxHQUNScEIsS0FBS0UsTUFBTWdCLFlBQWNFLEVBQUtqQixLQUM5QkgsS0FBS3VJLE9BQU9ySCxZQUFjRSxFQUFLaUgsUUp1REQsQ0FBRXdDLFNBQVUsY0FBZUMsU0FBVSxlQUFpQixpQkFFNUY3RCxFQUFJd0IsY0FDQ1osTUFBTW1ELElBQ0gvQixFQUFpQmIsWUFBWTRDLEdBQzdCL0IsRUFBaUJpQixjQUFjYyxFQUFLMUMsUUFDcEN0QixFQUFrQmdFLEVBQ1hoRSxLQUNSa0MsT0FBT0MsSUFDTkMsUUFBUUMsSUFBSUYsTUFLcEIsTUFBTThCLEVBQWUsSUFBSXpJLEVBQWM0RCxFQUFjUyxHQUNyRG9FLEVBQWExRyxtQkFFYixNQUFNMkcsRUFBZSxJQUFJMUksRUFBYzRELEVBQWNJLEdBQ3JEMEUsRUFBYTNHLG1CQUViLE1BQU00RyxFQUFjLElBQUkzSSxFQUFjNEQsRUFBY1csR0FLcEQsU0FBUzZDLEVBQVQsR0FBOEIsSUFBVixLQUFFOUosR0FBUSxFQVUxQixPQVRhLElBQUlMLEVBQUssQ0FDZEssS0FBQUEsRUFDQUMsZ0JBQWlCLElBQW9CLElBQW5CLEtBQUVJLEVBQUYsS0FBUUUsR0FBVyxFQUNqQ3dKLEVBQVcxRSxLQUFLLENBQUVoRixLQUFBQSxFQUFNRSxLQUFBQSxNQUdoQ2lHLEVBQ0ExRyxFQUFtQkMsR0FDRXdDLGFBQWEyRSxHQWUxQyxTQUFTbkgsRUFBZ0J1QixHQUNyQjZGLEVBQUk0QixXQUFXekgsRUFBS1YsS0FDZm1ILE1BQU1DLElBQ0gxRyxFQUFLSCxhQUFhQyxZQUFjNEcsRUFBSXZILE1BQU1TLE9BQzFDSSxFQUFLRSxZQUFZQyxVQUFVOEIsT0FBTyxrQ0FFckM2RixNQUFPakMsRUFBSTJCLFFBQVF4SCxHQUNmeUcsTUFBTUMsSUFDSDFHLEVBQUtILGFBQWFDLFlBQWM0RyxFQUFJdkgsTUFBTVMsT0FDMUNJLEVBQUtFLFlBQVlDLFVBQVVDLElBQUksbUNBSS9DLFNBQVM1QixFQUFrQndCLEdBQ3ZCNEksRUFBWTlELGFBQWE5RSxHQTFDN0IrSixFQUFZNUcsbUJBNkVaa0MsRUFBV3RFLGlCQUFpQixTQUFTLEtBQ2pDK0ksRUFBYTVHLGtCQUNiMEUsRUFBaUI3RCxPQUNqQixNQUFNaUcsRUFBaUJuQyxFQUFpQlIsY0FDeEM5QixFQUFVVixNQUFRbUYsRUFBZWpMLEtBQ2pDeUcsRUFBVVgsTUFBUW1GLEVBQWUvQyxTQUdyQzNCLEVBQWN2RSxpQkFBaUIsU0FBUyxLQUNwQzhJLEVBQWEzRyxrQkFDYmdGLEVBQWlCbkUsVUFFckIyQixFQUFXM0UsaUJBQWlCLFNBQVMsS0FDakNnSixFQUFZN0csa0JBQ1oyRixFQUFlOUUsVSIsInNvdXJjZXMiOlsid2VicGFjazovL2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL2Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vYXJvdW5kdGhldXMvLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL2Fyb3VuZHRoZXVzLy4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvQXBpLmpzIiwid2VicGFjazovL2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7XG4gICAgY29uc3RydWN0b3IoeyBpdGVtLCBoYW5kbGVDYXJkQ2xpY2sgfSwgdGVtcGxhdGVTZWxlY3RvciwgaGFuZGxlRGVsZXRlQ2xpY2ssIGhhbmRsZUxpa2VDbGljaykge1xuICAgICAgICB0aGlzLl90ZW1wbGF0ZVNlbGVjdG9yID0gdGVtcGxhdGVTZWxlY3RvcjtcbiAgICAgICAgdGhpcy5fbmFtZSA9IGl0ZW0ubmFtZTtcbiAgICAgICAgdGhpcy5fbGluayA9IGl0ZW0ubGluaztcbiAgICAgICAgdGhpcy5fbGlrZXMgPSBpdGVtLmxpa2VzO1xuICAgICAgICB0aGlzLl9vd25lcklkID0gaXRlbS5vd25lci5faWQ7XG4gICAgICAgIHRoaXMuX2lkID0gaXRlbS5faWQ7XG4gICAgICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayA9IGhhbmRsZUNhcmRDbGljaztcbiAgICAgICAgdGhpcy5faGFuZGxlRGVsZXRlQ2xpY2sgPSBoYW5kbGVEZWxldGVDbGljaztcbiAgICAgICAgdGhpcy5faGFuZGxlTGlrZUNsaWNrID0gaGFuZGxlTGlrZUNsaWNrO1xuICAgICAgICB0aGlzLl9pdGVtID0gaXRlbTtcbiAgICB9XG4gICAgX2NvdW50TGlrZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpa2VzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgIHRoaXMuX2xpa2VDb3VudGVyLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2xpa2VDb3VudGVyLnRleHRDb250ZW50ID0gdGhpcy5fbGlrZXMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9jaGVja0luaXRpYWxMaWtlKGRhdGEpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpa2VzLnNvbWUoaXRlbSA9PiBpdGVtLl9pZCA9PSBkYXRhLl9pZCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2xpa2VCdXR0b24uY2xhc3NMaXN0LmFkZCgnZ2FsbGVyeV9fbGlrZS1idXR0b25fYWN0aXZlJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2NvbXBhcmVJRChkYXRhKSB7XG4gICAgICAgIHRoaXMuX2RlbGV0ZUJ1dHRvbiA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmdhbGxlcnlfX2RlbGV0ZS1idXR0b24nKTtcbiAgICAgICAgaWYgKHRoaXMuX293bmVySWQgIT09IGRhdGEuX2lkKSB7XG4gICAgICAgICAgICB0aGlzLl9kZWxldGVCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBfZ2V0VGVtcGxhdGUoKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLl90ZW1wbGF0ZVNlbGVjdG9yXG4gICAgICAgICAgICAucXVlcnlTZWxlY3RvcignLmdhbGxlcnlfX2NhcmQnKVxuICAgICAgICAgICAgLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gICAgfVxuICAgIF9oYW5kbGVMaWtlQnV0dG9uKCkge1xuICAgICAgICB0aGlzLl9oYW5kbGVMaWtlQ2xpY2sodGhpcyk7XG4gICAgfVxuICAgIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy5fbGlrZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUxpa2VCdXR0b24oKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmdhbGxlcnlfX2RlbGV0ZS1idXR0b24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNsaWNrKHRoaXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fY2FyZFBpY3R1cmUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLl9oYW5kbGVDYXJkQ2xpY2soe1xuICAgICAgICAgICAgbmFtZTogdGhpcy5fbmFtZSxcbiAgICAgICAgICAgIGxpbms6IHRoaXMuX2xpbmtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBnZW5lcmF0ZUNhcmQoZGF0YSkge1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gdGhpcy5fZ2V0VGVtcGxhdGUoKTtcbiAgICAgICAgdGhpcy5fbGlrZUJ1dHRvbiA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmdhbGxlcnlfX2xpa2UtYnV0dG9uJyk7XG4gICAgICAgIHRoaXMuX2NhcmRQaWN0dXJlID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZ2FsbGVyeV9fcGljdHVyZScpO1xuICAgICAgICB0aGlzLl9saWtlQ291bnRlciA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmdhbGxlcnlfX2xpa2UtY291bnRlcicpO1xuICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLl9jb21wYXJlSUQoZGF0YSk7XG4gICAgICAgIHRoaXMuX2NoZWNrSW5pdGlhbExpa2UoZGF0YSk7XG4gICAgICAgIHRoaXMuX2NvdW50TGlrZSgpO1xuICAgICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5nYWxsZXJ5X190ZXh0JykudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xuICAgICAgICB0aGlzLl9jYXJkUGljdHVyZS5zcmMgPSB0aGlzLl9saW5rO1xuICAgICAgICB0aGlzLl9jYXJkUGljdHVyZS5hbHQgPSB0aGlzLl9uYW1lO1xuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIGZvcm1FbGVtZW50KSB7XG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XG4gICAgICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gZm9ybUVsZW1lbnQ7XG4gICAgfVxuXG4gICAgX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xuICAgICAgICB0aGlzLl9lcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYCk7XG4gICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX3NldHRpbmdzLmlucHV0RXJyb3JDbGFzcyk7XG4gICAgICAgIHRoaXMuX2Vycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGlucHV0RWxlbWVudC52YWxpZGF0aW9uTWVzc2FnZTtcbiAgICAgICAgdGhpcy5fZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fc2V0dGluZ3MuZXJyb3JDbGFzcyk7XG4gICAgfVxuICAgIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5fZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihgLiR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmApO1xuICAgICAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9zZXR0aW5ncy5pbnB1dEVycm9yQ2xhc3MpO1xuICAgICAgICB0aGlzLl9lcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9zZXR0aW5ncy5lcnJvckNsYXNzKTtcbiAgICAgICAgdGhpcy5fZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcbiAgICB9XG5cbiAgICBfaGFzSW52YWxpZElucHV0KGlucHV0TGlzdCkge1xuICAgICAgICBjb25zdCBpbnB1dHMgPSBBcnJheS5mcm9tKGlucHV0TGlzdCk7XG4gICAgICAgIHJldHVybiBpbnB1dHMuc29tZSgoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gIWlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF90b2dnbGVCdXR0b25TdGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhc0ludmFsaWRJbnB1dCh0aGlzLl9pbnB1dExpc3QpKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLl9zZXR0aW5ncy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgICAgICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9zZXR0aW5ncy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgICAgICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9oYW5kbGVJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCkge1xuICAgICAgICBpZiAoaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XG4gICAgICAgICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHRoaXMuX2lucHV0TGlzdCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fc2V0dGluZ3MuaW5wdXRTZWxlY3Rvcik7XG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fc2V0dGluZ3Muc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xuICAgICAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJlc2V0VmFsaWRhdGlvbigpIHtcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcbiAgICAgICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVuYWJsZVZhbGlkYXRpb24oKSB7XG4gICAgICAgIHRoaXMuX2Zvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xuICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xuICAgIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5fcG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xuICAgICAgICB0aGlzLl9oYW5kbGVFc2NhcGVDbG9zZSA9IHRoaXMuX2hhbmRsZUVzY0Nsb3NlLmJpbmQodGhpcyk7XG4gICAgfVxuICAgIF9oYW5kbGVFc2NDbG9zZShldnQpIHtcbiAgICAgICAgaWYgKGV2dC5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb3BlbigpIHtcbiAgICAgICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LmFkZCgncG9wdXBfdmlzaWJsZScpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5faGFuZGxlRXNjYXBlQ2xvc2UpO1xuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LnJlbW92ZSgncG9wdXBfdmlzaWJsZScpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5faGFuZGxlRXNjYXBlQ2xvc2UpO1xuICAgIH1cbiAgICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCAoZXZ0KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3BvcHVwX3Zpc2libGUnKSB8fCBldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncG9wdXBfX2Nsb3NlLWJ1dHRvbi1pY29uJykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBoYW5kbGVTdWJtaXQpIHtcbiAgICAgICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XG4gICAgICAgIHRoaXMuX2hhbmRsZVN1Ym1pdCA9IGhhbmRsZVN1Ym1pdDtcbiAgICAgICAgdGhpcy5fZm9ybSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fZm9ybScpO1xuICAgICAgICB0aGlzLl9idXR0b24gPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fYnV0dG9uJyk7XG4gICAgfVxuICAgIF9nZXRJbnB1dFZhbHVlcygpIHtcbiAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuICAgICAgICB0aGlzLl9pbnB1dExpc3QgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yQWxsKCcucG9wdXBfX2lucHV0Jyk7XG4gICAgICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fZGF0YVtpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YTtcbiAgICB9XG4gICAgb3BlbldpdGhEYXRhKGRhdGEpIHtcbiAgICAgICAgc3VwZXIub3BlbigpO1xuICAgICAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHN1cGVyLmNsb3NlKCk7XG4gICAgICAgIHRoaXMuX2J1dHRvbi50ZXh0Q29udGVudCA9IFwiU2F2ZVwiO1xuICAgICAgICB0aGlzLl9mb3JtLnJlc2V0KCk7XG4gICAgfVxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLl9wb3B1cC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZ0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9idXR0b24udGV4dENvbnRlbnQgPSBcIlNhdmluZy4uLlwiO1xuICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVTdWJtaXQodGhpcy5fZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCIvL3BhZ2Ugc2V0dGluZ3NcblxuZXhwb3J0IGNvbnN0IHBhZ2VTZXR0aW5ncyA9IHtcbiAgICBmb3JtU2VsZWN0b3I6IFwiLnBvcHVwX19mb3JtXCIsXG4gICAgaW5wdXRTZWxlY3RvcjogXCIucG9wdXBfX2lucHV0XCIsXG4gICAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLnBvcHVwX19idXR0b25cIixcbiAgICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcInBvcHVwX19idXR0b25fZGlzYWJsZWRcIixcbiAgICBpbnB1dEVycm9yQ2xhc3M6IFwicG9wdXBfX2lucHV0X3R5cGVfZXJyb3JcIixcbiAgICBlcnJvckNsYXNzOiBcInBvcHVwX19lcnJvcl9hY3RpdmVcIlxufTsiLCIvL2ltcG9ydHNcbmltcG9ydCBcIi4vaW5kZXguY3NzXCI7XG5cbmltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL2Zvcm1WYWxpZGF0b3IuanNcIjtcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XG5pbXBvcnQgQXBpIGZyb20gXCIuLi9jb21wb25lbnRzL0FwaS5qc1wiO1xuaW1wb3J0IHtcbiAgICBwYWdlU2V0dGluZ3MsXG59IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcblxuLy92YXJpYWJsZXNcblxuY29uc3QgY2FyZFRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjYXJkLXRlbXBsYXRlXCIpLmNvbnRlbnQ7XG5jb25zdCBlZGl0Rm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fZm9ybS1wcm9maWxlJyk7XG5jb25zdCBlZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnVzZXJfX2VkaXQtYnV0dG9uJyk7XG5jb25zdCBhZGRDYXJkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnVzZXJfX2FkZC1idXR0b24nKTtcbmNvbnN0IGlucHV0TmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9faW5wdXRfdmFsdWVfbmFtZScpO1xuY29uc3QgaW5wdXRJbmZvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbnB1dF92YWx1ZV9hYm91dCcpO1xuY29uc3QgYWRkQ2FyZEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Zvcm0tYWRkQ2FyZCcpO1xuY29uc3QgdXNlckF2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy51c2VyX19hdmF0YXItd3JhcHBlcicpO1xuY29uc3QgYXZhdGFyRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fZm9ybS1hdmF0YXInKTtcbmxldCBjdXJyZW50VXNlckluZm8gPSB7fTtcblxuLy9jbGFzcyBpbnN0YW5jZXNcbmNvbnN0IGFwaSA9IG5ldyBBcGkoe1xuICAgIGJhc2VVcmw6IFwiaHR0cHM6Ly9hcm91bmQubm9tb3JlcGFydGllcy5jby92MS9ncm91cC0xMlwiLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICAgYXV0aG9yaXphdGlvbjogXCIzMDJjYTM4Ny1iMzFhLTRjYjItOGNiOS0xOTdlMTg3ZGMzODJcIixcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9XG59KTtcblxuXG5jb25zdCBwb3B1cEVkaXRQcm9maWxlID0gbmV3IFBvcHVwV2l0aEZvcm0oJy5wb3B1cF90eXBlX3Byb2ZpbGUnLCBoYW5kbGVQcm9maWxlRm9ybVN1Ym1pdCk7XG5wb3B1cEVkaXRQcm9maWxlLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbmNvbnN0IHBvcHVwQWRkQ2FyZEZvcm0gPSBuZXcgUG9wdXBXaXRoRm9ybSgnLnBvcHVwX3R5cGVfYWRkQ2FyZCcsIGhhbmRsZUFkZENhcmRGb3JtU3VibWl0KTtcbnBvcHVwQWRkQ2FyZEZvcm0uc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuY29uc3QgcG9wdXBJbWFnZSA9IG5ldyBQb3B1cFdpdGhJbWFnZSgnLnBvcHVwX3R5cGVfaW1hZ2UnKTtcbnBvcHVwSW1hZ2Uuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuY29uc3QgZGVsZXRlUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybSgnLnBvcHVwX3R5cGVfZGVsZXRlJywgaGFuZGxlRGVsZXRlQ2FyZEZvcm1TdWJtaXQpO1xuZGVsZXRlUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuY29uc3QgcG9wdXBGb3JBdmF0YXIgPSBuZXcgUG9wdXBXaXRoRm9ybSgnLnBvcHVwX3R5cGVfYXZhdGFyJywgaGFuZGxlQXZhdGFyRm9ybVN1Ym1pdCk7XG5wb3B1cEZvckF2YXRhci5zZXRFdmVudExpc3RlbmVycygpO1xuXG5jb25zdCBwYWdlR2FsbGVyeSA9IG5ldyBTZWN0aW9uKHtcbiAgICBpdGVtczogW10sXG4gICAgcmVuZGVyZXI6IChpdGVtKSA9PiB7XG4gICAgICAgIHBhZ2VHYWxsZXJ5LmFkZEl0ZW0oY3JlYXRlQ2FyZCh7IGl0ZW0gfSkpO1xuICAgIH1cbn0sICcuZ2FsbGVyeScpO1xuXG5hcGkuZ2V0SW5pdGlhbENhcmRzKClcbiAgICAudGhlbigoY2FyZERhdGEpID0+IHtcbiAgICAgICAgY29uc3QgY2FyZHMgPSBBcnJheS5mcm9tKGNhcmREYXRhKTtcbiAgICAgICAgY2FyZHMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIHBhZ2VHYWxsZXJ5LmFkZEl0ZW0oY3JlYXRlQ2FyZCh7IGl0ZW0gfSkpO1xuICAgICAgICB9KTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgfSlcblxuY29uc3QgdXNlckluZm9JbnN0YW5jZSA9IG5ldyBVc2VySW5mbyh7IHVzZXJOYW1lOiAnLnVzZXJfX25hbWUnLCB1c2VySW5mbzogJy51c2VyX19pbmZvJyB9LCAnLnVzZXJfX2F2YXRhcicpO1xuXG5hcGkuZ2V0VXNlckluZm8oKVxuICAgIC50aGVuKChpbmZvKSA9PiB7XG4gICAgICAgIHVzZXJJbmZvSW5zdGFuY2Uuc2V0VXNlckluZm8oaW5mbyk7XG4gICAgICAgIHVzZXJJbmZvSW5zdGFuY2Uuc2V0VXNlckF2YXRhcihpbmZvLmF2YXRhcik7XG4gICAgICAgIGN1cnJlbnRVc2VySW5mbyA9IGluZm87XG4gICAgICAgIHJldHVybiBjdXJyZW50VXNlckluZm87XG4gICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH0pXG5cbi8vdmFsaWRhdG9yc1xuXG5jb25zdCBwb3B1cEFkZENhcmQgPSBuZXcgRm9ybVZhbGlkYXRvcihwYWdlU2V0dGluZ3MsIGFkZENhcmRGb3JtKTtcbnBvcHVwQWRkQ2FyZC5lbmFibGVWYWxpZGF0aW9uKCk7XG5cbmNvbnN0IHBvcHVwUHJvZmlsZSA9IG5ldyBGb3JtVmFsaWRhdG9yKHBhZ2VTZXR0aW5ncywgZWRpdEZvcm0pO1xucG9wdXBQcm9maWxlLmVuYWJsZVZhbGlkYXRpb24oKTtcblxuY29uc3QgYXZhdGFyUG9wdXAgPSBuZXcgRm9ybVZhbGlkYXRvcihwYWdlU2V0dGluZ3MsIGF2YXRhckZvcm0pO1xuYXZhdGFyUG9wdXAuZW5hYmxlVmFsaWRhdGlvbigpO1xuXG4vL2Z1bmN0aW9uc1xuXG5mdW5jdGlvbiBjcmVhdGVDYXJkKHsgaXRlbSB9KSB7XG4gICAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKHtcbiAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICBoYW5kbGVDYXJkQ2xpY2s6ICh7IG5hbWUsIGxpbmsgfSkgPT4ge1xuICAgICAgICAgICAgICAgIHBvcHVwSW1hZ2Uub3Blbih7IG5hbWUsIGxpbmsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhcmRUZW1wbGF0ZSxcbiAgICAgICAgaGFuZGxlRGVsZXRlQ2xpY2ssIGhhbmRsZUxpa2VDbGljayk7XG4gICAgY29uc3QgY2FyZEVsZW1lbnQgPSBjYXJkLmdlbmVyYXRlQ2FyZChjdXJyZW50VXNlckluZm8pO1xuICAgIHJldHVybiBjYXJkRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlQXZhdGFyRm9ybVN1Ym1pdCgpIHtcbiAgICBjb25zdCBkYXRhID0gcG9wdXBGb3JBdmF0YXIuX2dldElucHV0VmFsdWVzKCk7XG4gICAgYXBpLmVkaXRQcm9maWxlUGhvdG8oZGF0YS5hdmF0YXIpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgdXNlckluZm9JbnN0YW5jZS5zZXRVc2VyQXZhdGFyKGRhdGEuYXZhdGFyKTtcbiAgICAgICAgICAgIHBvcHVwRm9yQXZhdGFyLmNsb3NlKCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICB9KVxufVxuXG5mdW5jdGlvbiBoYW5kbGVMaWtlQ2xpY2soZGF0YSkge1xuICAgIGFwaS5saWtlRGVsZXRlKGRhdGEuX2lkKVxuICAgICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICBkYXRhLl9saWtlQ291bnRlci50ZXh0Q29udGVudCA9IHJlcy5saWtlcy5sZW5ndGg7XG4gICAgICAgICAgICBkYXRhLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2dhbGxlcnlfX2xpa2UtYnV0dG9uX2FjdGl2ZScpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGFwaS5saWtlQWRkKGRhdGEpXG4gICAgICAgICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgZGF0YS5fbGlrZUNvdW50ZXIudGV4dENvbnRlbnQgPSByZXMubGlrZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGRhdGEuX2xpa2VCdXR0b24uY2xhc3NMaXN0LmFkZCgnZ2FsbGVyeV9fbGlrZS1idXR0b25fYWN0aXZlJyk7XG4gICAgICAgICAgICB9KSkpXG59XG5cbmZ1bmN0aW9uIGhhbmRsZURlbGV0ZUNsaWNrKGRhdGEpIHtcbiAgICBkZWxldGVQb3B1cC5vcGVuV2l0aERhdGEoZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZURlbGV0ZUNhcmRGb3JtU3VibWl0KGRhdGEpIHtcbiAgICBhcGkuZGVsZXRlQ2FyZChkYXRhKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGRhdGEuX2VsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICBkZWxldGVQb3B1cC5jbG9zZSgpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgfSlcbn1cblxuZnVuY3Rpb24gaGFuZGxlUHJvZmlsZUZvcm1TdWJtaXQoKSB7XG4gICAgYXBpLnNldFVzZXJJbmZvKHBvcHVwRWRpdFByb2ZpbGUuX2dldElucHV0VmFsdWVzKCkpXG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIHVzZXJJbmZvSW5zdGFuY2Uuc2V0VXNlckluZm8ocG9wdXBFZGl0UHJvZmlsZS5fZ2V0SW5wdXRWYWx1ZXMoKSk7XG4gICAgICAgICAgICBwb3B1cEVkaXRQcm9maWxlLmNsb3NlKCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICB9KVxufVxuXG5mdW5jdGlvbiBoYW5kbGVBZGRDYXJkRm9ybVN1Ym1pdCgpIHtcbiAgICBjb25zdCBnZXRWYWx1ZXMgPSBwb3B1cEFkZENhcmRGb3JtLl9nZXRJbnB1dFZhbHVlcygpO1xuICAgIGNvbnN0IGRhdGEgPSB7IG5hbWU6IGdldFZhbHVlcy50aXRsZSwgbGluazogZ2V0VmFsdWVzLnVybCB9O1xuICAgIGFwaS5zZW5kQ2FyZERhdGEoZGF0YSkudGhlbigoaXRlbSkgPT4ge1xuICAgICAgICBwYWdlR2FsbGVyeS5hZGRJdGVtKGNyZWF0ZUNhcmQoeyBpdGVtIH0pKTtcbiAgICAgICAgcG9wdXBBZGRDYXJkRm9ybS5jbG9zZSgpO1xuICAgICAgICBhZGRDYXJkRm9ybS5yZXNldCgpO1xuICAgIH0pO1xufVxuLy9ldmVudCBsaXN0ZW5lcnNcblxuZWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBwb3B1cFByb2ZpbGUucmVzZXRWYWxpZGF0aW9uKCk7XG4gICAgcG9wdXBFZGl0UHJvZmlsZS5vcGVuKCk7XG4gICAgY29uc3QgdXNlckFjdHVhbEluZm8gPSB1c2VySW5mb0luc3RhbmNlLmdldFVzZXJJbmZvKCk7XG4gICAgaW5wdXROYW1lLnZhbHVlID0gdXNlckFjdHVhbEluZm8ubmFtZTtcbiAgICBpbnB1dEluZm8udmFsdWUgPSB1c2VyQWN0dWFsSW5mby5hYm91dDtcbn0pO1xuXG5hZGRDYXJkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIHBvcHVwQWRkQ2FyZC5yZXNldFZhbGlkYXRpb24oKTtcbiAgICBwb3B1cEFkZENhcmRGb3JtLm9wZW4oKTtcbn0pO1xudXNlckF2YXRhci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBhdmF0YXJQb3B1cC5yZXNldFZhbGlkYXRpb24oKTtcbiAgICBwb3B1cEZvckF2YXRhci5vcGVuKCk7XG59KTsiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fYmFzZVVybCA9IG9wdGlvbnMuYmFzZVVybDtcbiAgICAgICAgdGhpcy5faGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycztcbiAgICB9XG4gICAgc2VuZENhcmREYXRhKGl0ZW0pIHtcbiAgICAgICAgdGhpcy5fbmFtZSA9IGl0ZW0ubmFtZTtcbiAgICAgICAgdGhpcy5fbGluayA9IGl0ZW0ubGluaztcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMuX25hbWUsXG4gICAgICAgICAgICAgICAgICAgIGxpbms6IHRoaXMuX2xpbmtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcy5vaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xuICAgICAgICAgICAgfSlcbiAgICB9XG4gICAgc2V0VXNlckluZm8oeyBuYW1lLCBhYm91dCwgYXZhdGFyIH0pIHtcbiAgICAgICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuX2Fib3V0ID0gYWJvdXQ7XG4gICAgICAgIHRoaXMuX2F2YXRhciA9IGF2YXRhcjtcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYCwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLl9uYW1lLFxuICAgICAgICAgICAgICAgICAgICBhYm91dDogdGhpcy5fYWJvdXQsXG4gICAgICAgICAgICAgICAgICAgIGF2YXRhcjogdGhpcy5fYXZhdGFyXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXMub2spIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcbiAgICAgICAgICAgIH0pXG4gICAgfVxuICAgIGdldFVzZXJJbmZvKCkge1xuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnNcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXMub2spIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcbiAgICAgICAgICAgIH0pXG4gICAgfVxuICAgIGdldEluaXRpYWxDYXJkcygpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke3Jlcy5zdGF0dXN9YCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG4gICAgZGVsZXRlQ2FyZChkYXRhKSB7XG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2RhdGEuX2lkfWAsIHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsaWtlQWRkKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzL2xpa2VzLyR7ZGF0YS5faWR9YCwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgICAgfSkudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcy5vaykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xuICAgICAgICB9KVxuICAgIH1cbiAgICBsaWtlRGVsZXRlKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzL2xpa2VzLyR7ZGF0YX1gLCB7XG4gICAgICAgICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgICB9KS50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke3Jlcy5zdGF0dXN9YCk7XG4gICAgICAgIH0pXG4gICAgfVxuICAgIGVkaXRQcm9maWxlUGhvdG8oZGF0YSkge1xuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIGF2YXRhcjogZGF0YVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSkudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcy5vaykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xuICAgICAgICB9KVxuICAgIH1cbn0iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XG4gICAgb3Blbih7IG5hbWUsIGxpbmsgfSkge1xuICAgICAgICB0aGlzLl9lbGVtZW50UGljID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbWFnZScpO1xuICAgICAgICB0aGlzLl9lbGVtZW50VGV4dCA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9faW1hZ2UtdGV4dCcpO1xuICAgICAgICB0aGlzLl9lbGVtZW50UGljLnNyYyA9IGxpbms7XG4gICAgICAgIHRoaXMuX2VsZW1lbnRQaWMuYWx0ID0gYCR7bmFtZX0gcGhvdG9gO1xuICAgICAgICB0aGlzLl9lbGVtZW50VGV4dC50ZXh0Q29udGVudCA9IG5hbWU7XG4gICAgICAgIHN1cGVyLm9wZW4oKTtcbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5fcmVuZGVyZWRJdGVtcyA9IGl0ZW1zO1xuICAgICAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgICAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lclNlbGVjdG9yKTtcbiAgICB9XG5cbiAgICBhZGRJdGVtKGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLnByZXBlbmQoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgcmVuZGVySXRlbXMoKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVkSXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlckluZm8ge1xuICAgIGNvbnN0cnVjdG9yKHsgdXNlck5hbWUsIHVzZXJJbmZvIH0sIGF2YXRhcikge1xuICAgICAgICB0aGlzLl9uYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih1c2VyTmFtZSk7XG4gICAgICAgIHRoaXMuX2Fib3V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih1c2VySW5mbyk7XG4gICAgICAgIHRoaXMuX2F2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYXZhdGFyKTtcbiAgICB9XG4gICAgZ2V0VXNlckluZm8oKSB7XG4gICAgICAgIHRoaXMuX3VzZXJEYXRhID0geyBuYW1lOiB0aGlzLl9uYW1lLnRleHRDb250ZW50LCBhYm91dDogdGhpcy5fYWJvdXQudGV4dENvbnRlbnQgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJEYXRhO1xuICAgIH1cbiAgICBzZXRVc2VyQXZhdGFyKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fYXZhdGFyLnNyYyA9IGRhdGE7XG4gICAgfVxuICAgIHNldFVzZXJJbmZvKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fbmFtZS50ZXh0Q29udGVudCA9IGRhdGEubmFtZTtcbiAgICAgICAgdGhpcy5fYWJvdXQudGV4dENvbnRlbnQgPSBkYXRhLmFib3V0O1xuICAgIH1cbn0iXSwibmFtZXMiOlsiQ2FyZCIsImNvbnN0cnVjdG9yIiwidGVtcGxhdGVTZWxlY3RvciIsImhhbmRsZURlbGV0ZUNsaWNrIiwiaGFuZGxlTGlrZUNsaWNrIiwiaXRlbSIsImhhbmRsZUNhcmRDbGljayIsInRoaXMiLCJfdGVtcGxhdGVTZWxlY3RvciIsIl9uYW1lIiwibmFtZSIsIl9saW5rIiwibGluayIsIl9saWtlcyIsImxpa2VzIiwiX293bmVySWQiLCJvd25lciIsIl9pZCIsIl9oYW5kbGVDYXJkQ2xpY2siLCJfaGFuZGxlRGVsZXRlQ2xpY2siLCJfaGFuZGxlTGlrZUNsaWNrIiwiX2l0ZW0iLCJfY291bnRMaWtlIiwibGVuZ3RoIiwiX2xpa2VDb3VudGVyIiwidGV4dENvbnRlbnQiLCJfY2hlY2tJbml0aWFsTGlrZSIsImRhdGEiLCJzb21lIiwiX2xpa2VCdXR0b24iLCJjbGFzc0xpc3QiLCJhZGQiLCJfY29tcGFyZUlEIiwiX2RlbGV0ZUJ1dHRvbiIsIl9lbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInN0eWxlIiwiZGlzcGxheSIsIl9nZXRUZW1wbGF0ZSIsImNsb25lTm9kZSIsIl9oYW5kbGVMaWtlQnV0dG9uIiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9jYXJkUGljdHVyZSIsImdlbmVyYXRlQ2FyZCIsInNyYyIsImFsdCIsIkZvcm1WYWxpZGF0b3IiLCJzZXR0aW5ncyIsImZvcm1FbGVtZW50IiwiX3NldHRpbmdzIiwiX2Zvcm1FbGVtZW50IiwiX3Nob3dJbnB1dEVycm9yIiwiaW5wdXRFbGVtZW50IiwiX2Vycm9yRWxlbWVudCIsImlkIiwiaW5wdXRFcnJvckNsYXNzIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJlcnJvckNsYXNzIiwiX2hpZGVJbnB1dEVycm9yIiwicmVtb3ZlIiwiX2hhc0ludmFsaWRJbnB1dCIsImlucHV0TGlzdCIsIkFycmF5IiwiZnJvbSIsInZhbGlkaXR5IiwidmFsaWQiLCJfdG9nZ2xlQnV0dG9uU3RhdGUiLCJfaW5wdXRMaXN0IiwiX3N1Ym1pdEJ1dHRvbiIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJkaXNhYmxlZCIsIl9oYW5kbGVJbnB1dFZhbGlkaXR5IiwicXVlcnlTZWxlY3RvckFsbCIsImlucHV0U2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsImZvckVhY2giLCJyZXNldFZhbGlkYXRpb24iLCJlbmFibGVWYWxpZGF0aW9uIiwiZXZ0IiwicHJldmVudERlZmF1bHQiLCJQb3B1cCIsInBvcHVwU2VsZWN0b3IiLCJfcG9wdXAiLCJkb2N1bWVudCIsIl9oYW5kbGVFc2NhcGVDbG9zZSIsIl9oYW5kbGVFc2NDbG9zZSIsImJpbmQiLCJrZXkiLCJjbG9zZSIsIm9wZW4iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJ0YXJnZXQiLCJjb250YWlucyIsIlBvcHVwV2l0aEZvcm0iLCJoYW5kbGVTdWJtaXQiLCJzdXBlciIsIl9oYW5kbGVTdWJtaXQiLCJfZm9ybSIsIl9idXR0b24iLCJfZ2V0SW5wdXRWYWx1ZXMiLCJfZGF0YSIsImlucHV0IiwidmFsdWUiLCJvcGVuV2l0aERhdGEiLCJyZXNldCIsInBhZ2VTZXR0aW5ncyIsImZvcm1TZWxlY3RvciIsImNhcmRUZW1wbGF0ZSIsImNvbnRlbnQiLCJlZGl0Rm9ybSIsImVkaXRCdXR0b24iLCJhZGRDYXJkQnV0dG9uIiwiaW5wdXROYW1lIiwiaW5wdXRJbmZvIiwiYWRkQ2FyZEZvcm0iLCJ1c2VyQXZhdGFyIiwiYXZhdGFyRm9ybSIsImN1cnJlbnRVc2VySW5mbyIsImFwaSIsIm9wdGlvbnMiLCJfYmFzZVVybCIsImJhc2VVcmwiLCJfaGVhZGVycyIsImhlYWRlcnMiLCJzZW5kQ2FyZERhdGEiLCJmZXRjaCIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwidGhlbiIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJzZXRVc2VySW5mbyIsImFib3V0IiwiYXZhdGFyIiwiX2Fib3V0IiwiX2F2YXRhciIsImdldFVzZXJJbmZvIiwiZ2V0SW5pdGlhbENhcmRzIiwiZGVsZXRlQ2FyZCIsImxpa2VBZGQiLCJsaWtlRGVsZXRlIiwiZWRpdFByb2ZpbGVQaG90byIsImF1dGhvcml6YXRpb24iLCJwb3B1cEVkaXRQcm9maWxlIiwidXNlckluZm9JbnN0YW5jZSIsImNhdGNoIiwiZXJyIiwiY29uc29sZSIsImxvZyIsInBvcHVwQWRkQ2FyZEZvcm0iLCJnZXRWYWx1ZXMiLCJ0aXRsZSIsInVybCIsInBhZ2VHYWxsZXJ5IiwiYWRkSXRlbSIsImNyZWF0ZUNhcmQiLCJwb3B1cEltYWdlIiwiX2VsZW1lbnRQaWMiLCJfZWxlbWVudFRleHQiLCJkZWxldGVQb3B1cCIsInBvcHVwRm9yQXZhdGFyIiwic2V0VXNlckF2YXRhciIsImNvbnRhaW5lclNlbGVjdG9yIiwiaXRlbXMiLCJyZW5kZXJlciIsIl9yZW5kZXJlZEl0ZW1zIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsImVsZW1lbnQiLCJwcmVwZW5kIiwicmVuZGVySXRlbXMiLCJjYXJkRGF0YSIsInVzZXJOYW1lIiwidXNlckluZm8iLCJfdXNlckRhdGEiLCJpbmZvIiwicG9wdXBBZGRDYXJkIiwicG9wdXBQcm9maWxlIiwiYXZhdGFyUG9wdXAiLCJ1c2VyQWN0dWFsSW5mbyJdLCJzb3VyY2VSb290IjoiIn0=