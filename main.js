!function(){"use strict";class e{constructor(e,t,s,n){let{item:i,handleCardClick:r}=e;this._templateSelector=t,this._name=i.name,this._link=i.link,this._likes=i.likes,this._ownerId=i.owner._id,this._id=i._id,this._handleCardClick=r,this._handleDeleteClick=s,this._handleLikeClick=n,this._item=i}_countLike(){this._likes.length<1?this._likeCounter.textContent="":this._likeCounter.textContent=this._likes.length}_checkInitialLike(e){this._likes.some((t=>t._id==e._id))&&this._likeButton.classList.add("gallery__like-button_active")}_compareID(e){this._deleteButton=this._element.querySelector(".gallery__delete-button"),this._ownerId!==e._id&&(this._deleteButton.style.display="none")}_getTemplate(){return this._element=this._templateSelector.querySelector(".gallery__card").cloneNode(!0),this._element}_handleLikeButton(){this._likeButton.classList.toggle("gallery__like-button_active"),this._handleLikeClick(this)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeButton()})),this._element.querySelector(".gallery__delete-button").addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardPicture.addEventListener("click",(()=>this._handleCardClick({name:this._name,link:this._link})))}generateCard(e){return this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".gallery__like-button"),this._cardPicture=this._element.querySelector(".gallery__picture"),this._likeCounter=this._element.querySelector(".gallery__like-counter"),this._setEventListeners(),this._compareID(e),this._checkInitialLike(e),this._countLike(),this._element.querySelector(".gallery__text").textContent=this._name,this._cardPicture.src=this._link,this._cardPicture.alt=this._name,this._element}}class t{constructor(e,t){this._settings=e,this._formElement=t}_showInputError(e){this._errorElement=this._formElement.querySelector(".".concat(e.id,"-error")),e.classList.add(this._settings.inputErrorClass),this._errorElement.textContent=e.validationMessage,this._errorElement.classList.add(this._settings.errorClass)}_hideInputError(e){this._errorElement=this._formElement.querySelector(".".concat(e.id,"-error")),e.classList.remove(this._settings.inputErrorClass),this._errorElement.classList.remove(this._settings.errorClass),this._errorElement.textContent=""}_hasInvalidInput(e){return Array.from(e).some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput(this._inputList)?(this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1)}_handleInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_setEventListeners(){this._inputList=this._formElement.querySelectorAll(this._settings.inputSelector),this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._handleInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor(e){this._popup=document.querySelector(e),this._handleEscapeClose=this._handleEscClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){this._popup.classList.add("popup_visible"),document.addEventListener("keydown",this._handleEscapeClose)}close(){this._popup.classList.remove("popup_visible"),document.removeEventListener("keydown",this._handleEscapeClose)}setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup_visible")||e.target.classList.contains("popup__close-button-icon"))&&this.close()}))}}class n extends s{constructor(e,t){super(e),this._handleSubmit=t,this._form=this._popup.querySelector(".popup__form"),this._button=this._form.querySelector(".popup__button")}_getInputValues(){return this._data={},this._inputList=this._popup.querySelectorAll(".popup__input"),this._inputList.forEach((e=>{this._data[e.name]=e.value})),this._data}openWithData(e){super.open(),this._data=e}close(){super.close(),this._form.reset()}setEventListeners(){super.setEventListeners(),this._popup.addEventListener("submit",(e=>{e.preventDefault(),this._button.textContent="Saving...",this._handleSubmit(this._data),this.close(),this._button.textContent="Save"}))}}const i={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_active"},r=document.querySelector("#card-template").content,o=document.querySelector(".popup__form-profile"),a=document.querySelector(".user__edit-button"),l=document.querySelector(".user__add-button"),_=document.querySelector(".popup__input_value_name"),c=document.querySelector(".popup__input_value_about"),h=document.querySelector(".popup__form-addCard"),u=document.querySelector(".user__avatar-wrapper"),d=document.querySelector(".popup__form-avatar");let p={};const m=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}sendCardData(e){return this._name=e.name,this._link=e.link,fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:this._name,link:this._link})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}setUserInfo(e){let{name:t,about:s,avatar:n}=e;return this._name=t,this._about=s,this._avatar=n,fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:this._name,about:this._about,avatar:this._avatar})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}getUserInfo(){return fetch("".concat(this._baseUrl,"/users/me"),{method:"GET",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}getInitialCards(){return fetch("".concat(this._baseUrl,"/cards"),{method:"GET",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}deleteCard(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e._id),{method:"DELETE",headers:this._headers})}likeAdd(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e._id),{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}likeDelete(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}editProfilePhoto(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"302ca387-b31a-4cb2-8cb9-197e187dc382","Content-Type":"application/json"}}),k=new n(".popup_type_profile",(function(){m.setUserInfo(k._getInputValues()).catch((e=>{console.log(e)})),f.setUserInfo(k._getInputValues())}));k.setEventListeners();const v=new n(".popup_type_addCard",(function(){const e=v._getInputValues(),t={name:e.title,link:e.url};m.sendCardData(t).then((e=>{y.addItem(S({item:e}))})),h.reset()}));v.setEventListeners();const E=new class extends s{open(e){let{name:t,link:s}=e;this._elementPic=this._popup.querySelector(".popup__image"),this._elementText=this._popup.querySelector(".popup__image-text"),this._elementPic.src=s,this._elementPic.alt="".concat(t," photo"),this._elementText.textContent=t,super.open()}}(".popup_type_image");E.setEventListeners();const b=new n(".popup_type_delete",(function(e){m.deleteCard(e).then((t=>{e._element.remove(),b.close()})).catch((e=>{console.log(e)}))}));b.setEventListeners();const g=new n(".popup_type_avatar",(function(){const e=g._getInputValues();m.editProfilePhoto(e.url).catch((e=>{console.log(e)})),f.setUserAvatar(e.url)}));g.setEventListeners();const y=new class{constructor(e,t){let{items:s,renderer:n}=e;this._renderedItems=s,this._renderer=n,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}renderItems(){this._renderedItems.forEach((e=>{this._renderer(e)}))}}({items:[],renderer:e=>{y.addItem(S({item:e}))}},".gallery");m.getInitialCards().then((e=>{Array.from(e).forEach((e=>{y.addItem(S({item:e}))}))})).catch((e=>{console.log(e)}));const f=new class{constructor(e,t){let{userName:s,userInfo:n}=e;this._name=document.querySelector(s),this._about=document.querySelector(n),this._avatar=document.querySelector(t)}getUserInfo(){return this._userData={name:this._name.textContent,about:this._about.textContent},this._userData}setUserAvatar(e){this._avatar.src=e}setUserInfo(e){this._name.textContent=e.name,this._about.textContent=e.about}}({userName:".user__name",userInfo:".user__info"},".user__avatar");m.getUserInfo().then((e=>(f.setUserInfo(e),f.setUserAvatar(e.avatar),p=e,p))).catch((e=>{console.log(e)}));const C=new t(i,h);C.enableValidation();const L=new t(i,o);function S(t){let{item:s}=t;return new e({item:s,handleCardClick:e=>{let{name:t,link:s}=e;E.open({name:t,link:s})}},r,q,I).generateCard(p)}function I(e){m.likeDelete(e._id).then((t=>{e._likeCounter.textContent=t.likes.length})).catch(m.likeAdd(e).then((t=>{e._likeCounter.textContent=t.likes.length})))}function q(e){b.openWithData(e)}L.enableValidation(),new t(i,d).enableValidation(),a.addEventListener("click",(()=>{L.resetValidation(),k.open();const e=f.getUserInfo();_.value=e.name,c.value=e.about})),l.addEventListener("click",(()=>{C.resetValidation(),v.open()})),u.addEventListener("click",(()=>{g.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,