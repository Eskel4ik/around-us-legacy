!function(){"use strict";class e{constructor(e,t,s,n){let{item:i,handleCardClick:r}=e;this._templateSelector=t,this._name=i.name,this._link=i.link,this._likes=i.likes,this._ownerId=i.owner._id,this._id=i._id,this._handleCardClick=r,this._handleDeleteClick=s,this._handleLikeClick=n,this._item=i}_countLike(){this._likes.length<1?this._likeCounter.textContent="":this._likeCounter.textContent=this._likes.length}updateLike(e){this._likeCounter.textContent=e.likes.length,this._likeButton.classList.toggle("gallery__like-button_active"),0==this._likeCounter.textContent&&(this._likeCounter.textContent="")}_checkInitialLike(e){this._likes.some((t=>t._id==e._id))&&this._likeButton.classList.add("gallery__like-button_active")}_compareID(e){this._deleteButton=this._element.querySelector(".gallery__delete-button"),this._ownerId!==e._id&&(this._deleteButton.style.display="none")}_getTemplate(){return this._element=this._templateSelector.querySelector(".gallery__card").cloneNode(!0),this._element}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{const e=this._likeButton.classList.contains("gallery__like-button_active");this._handleLikeClick(this,e)})),this._element.querySelector(".gallery__delete-button").addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardPicture.addEventListener("click",(()=>this._handleCardClick({name:this._name,link:this._link})))}removeCard(){this._element.remove()}generateCard(e){return this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".gallery__like-button"),this._cardPicture=this._element.querySelector(".gallery__picture"),this._likeCounter=this._element.querySelector(".gallery__like-counter"),this._setEventListeners(),this._compareID(e),this._checkInitialLike(e),this._countLike(),this._element.querySelector(".gallery__text").textContent=this._name,this._cardPicture.src=this._link,this._cardPicture.alt=this._name,this._element}}class t{constructor(e,t){this._settings=e,this._formElement=t}_showInputError(e){this._errorElement=this._formElement.querySelector(".".concat(e.id,"-error")),e.classList.add(this._settings.inputErrorClass),this._errorElement.textContent=e.validationMessage,this._errorElement.classList.add(this._settings.errorClass)}_hideInputError(e){this._errorElement=this._formElement.querySelector(".".concat(e.id,"-error")),e.classList.remove(this._settings.inputErrorClass),this._errorElement.classList.remove(this._settings.errorClass),this._errorElement.textContent=""}_hasInvalidInput(e){return Array.from(e).some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput(this._inputList)?(this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1)}_handleInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_setEventListeners(){this._inputList=this._formElement.querySelectorAll(this._settings.inputSelector),this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._handleInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor(e){this._popup=document.querySelector(e),this._handleEscapeClose=this._handleEscClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){this._popup.classList.add("popup_visible"),document.addEventListener("keydown",this._handleEscapeClose)}close(){this._popup.classList.remove("popup_visible"),document.removeEventListener("keydown",this._handleEscapeClose)}setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup_visible")||e.target.classList.contains("popup__close-button-icon"))&&this.close()}))}}class n extends s{constructor(e,t){super(e),this._handleSubmit=t,this._form=this._popup.querySelector(".popup__form"),this._button=this._form.querySelector(".popup__button"),this._inputList=this._popup.querySelectorAll(".popup__input")}getInputValues(){return this._data={},this._inputList.forEach((e=>{this._data[e.name]=e.value})),this._data}openWithData(e){super.open(),e&&(this._data=e)}close(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Save";this._button.textContent=e,super.close(),this._form.reset()}setEventListeners(){super.setEventListeners(),this._popup.addEventListener("submit",(e=>{this._button.textContent="Saving...",e.preventDefault(),this._handleSubmit(this._data)}))}}const i={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_active"},r=document.querySelector("#card-template").content,o=document.querySelector(".popup__form-profile"),a=document.querySelector(".user__edit-button"),l=document.querySelector(".user__add-button"),c=document.querySelector(".popup__input_value_name"),h=document.querySelector(".popup__input_value_about"),_=document.querySelector(".popup__form-addCard"),u=document.querySelector(".user__avatar-wrapper"),d=document.querySelector(".popup__form-avatar");let p={};const m=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}sendCardData(e){return this._name=e.name,this._link=e.link,fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:this._name,link:this._link})}).then(this._checkResponce)}setUserInfo(e){let{name:t,about:s,avatar:n}=e;return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s,avatar:n})}).then(this._checkResponce)}getUserInfo(){return fetch("".concat(this._baseUrl,"/users/me"),{method:"GET",headers:this._headers}).then(this._checkResponce)}getInitialCards(){return fetch("".concat(this._baseUrl,"/cards"),{method:"GET",headers:this._headers}).then(this._checkResponce)}deleteCard(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e._id),{method:"DELETE",headers:this._headers}).then(this._checkResponce)}likeAdd(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e._id),{method:"PUT",headers:this._headers}).then(this._checkResponce)}likeDelete(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e._id),{method:"DELETE",headers:this._headers}).then(this._checkResponce)}editProfilePhoto(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponce)}_checkResponce(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"302ca387-b31a-4cb2-8cb9-197e187dc382","Content-Type":"application/json"}}),k=new n(".popup_type_profile",(function(){m.setUserInfo(k.getInputValues()).then((e=>{C.setUserInfo(e),k.close()})).catch((e=>{console.log(e)}))}));k.setEventListeners();const v=new n(".popup_type_addCard",(function(){const e=v.getInputValues(),t={name:e.title,link:e.url};m.sendCardData(t).then((e=>{E.addItem(e),v.close()})).catch((e=>{console.log(e)}))}));v.setEventListeners();const g=new class extends s{constructor(e){super(e),this._elementPic=this._popup.querySelector(".popup__image"),this._elementText=this._popup.querySelector(".popup__image-text")}open(e){let{name:t,link:s}=e;this._elementPic.src=s,this._elementPic.alt="".concat(t," photo"),this._elementText.textContent=t,super.open()}}(".popup_type_image");g.setEventListeners();const y=new n(".popup_type_delete",(function(e){m.deleteCard(e).then((t=>{e.removeCard(),y.close("Yes")})).catch((e=>{console.log(e)}))}));y.setEventListeners();const b=new n(".popup_type_avatar",(function(){const e=b.getInputValues();m.editProfilePhoto(e.avatar).then((t=>{C.setUserAvatar(e.avatar),b.close()})).catch((e=>{console.log(e)}))}));b.setEventListeners();const E=new class{constructor(e,t){let{items:s,renderer:n}=e;this._renderedItems=s,this._renderer=n,this._container=document.querySelector(t)}addItem(e){const t=this._renderer(e);this._container.prepend(t)}renderItems(e){Array.from(e).forEach((e=>{this.addItem(e)}))}}({items:[],renderer:t=>function(t){let{item:s}=t;return new e({item:s,handleCardClick:e=>{let{name:t,link:s}=e;g.open({name:t,link:s})}},r,q,I).generateCard(p)}({item:t})},".gallery"),C=new class{constructor(e,t){let{userName:s,userInfo:n}=e;this._name=document.querySelector(s),this._about=document.querySelector(n),this._avatar=document.querySelector(t)}getUserInfo(){return this._userData={name:this._name.textContent,about:this._about.textContent},this._userData}setUserAvatar(e){this._avatar.src=e}setUserInfo(e){this._name.textContent=e.name,this._about.textContent=e.about}}({userName:".user__name",userInfo:".user__info"},".user__avatar");Promise.all([m.getUserInfo(),m.getInitialCards()]).then((e=>{let[t,s]=e;C.setUserInfo(t),C.setUserAvatar(t.avatar),p=t,E.renderItems(s)})).catch((e=>{console.log(e)}));const f=new t(i,_);f.enableValidation();const L=new t(i,o);L.enableValidation();const S=new t(i,d);function I(e,t){t?m.likeDelete(e).then((t=>{e.updateLike(t)})).catch((e=>{console.log(e)})):m.likeAdd(e).then((t=>{e.updateLike(t)})).catch((e=>{console.log(e)}))}function q(e){y.openWithData(e)}S.enableValidation(),a.addEventListener("click",(()=>{L.resetValidation(),k.open();const e=C.getUserInfo();c.value=e.name,h.value=e.about})),l.addEventListener("click",(()=>{f.resetValidation(),v.open()})),u.addEventListener("click",(()=>{S.resetValidation(),b.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,